#!/usr/bin/env ruby

require 'scv'
require 'gli'
require 'colorize'

include GLI::App

program_desc 'A simple VCS implemented in Ruby on top of the VCSToolkit library'

version SCV::VERSION
subcommand_option_handling :normal

desc   'Print more stuff'
switch [:v, :verbose]

desc          'Colorize output if running in an interactive shell'
default_value true
switch        [:colors]

desc          'The path to the working directory'
default_value '.'
arg_name      'directory path'
flag          [:dir]

# Require utilities
require_relative 'utilities/shell'
require_relative 'utilities/output'

# Require formatters
require_relative 'formatters/changeset'
require_relative 'formatters/hierarchy'

# Require all available commands
require_relative 'commands/init'
require_relative 'commands/commit'
require_relative 'commands/status'
require_relative 'commands/history'
require_relative 'commands/diff'
require_relative 'commands/restore'
require_relative 'commands/branch'
require_relative 'commands/merge'
require_relative 'commands/config'

pre do |global, command, options, args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only

  # Check if the current directory is an SCV repository
  # or is a subdirectory of one.
  unless command.name == :init
    working_dir = Pathname.new(global[:dir]).realpath
    raise 'The working directory cannot be found' unless working_dir.directory?

    working_dir = working_dir.enum_for(:ascend).find { |dir| dir.join('.scv').directory? }
    raise "This directory is not (in) an SCV repository" if working_dir.nil?

    global[:dir] = working_dir.to_path
  end

  # Initialize the repository object.
  unless command.name == :init
    repository = SCV::Repository.new global[:dir]
    global[:repository] = repository
  end

  # Check if there is a commit in the repository
  # as most commands expect one to exist.
  unless [:init, :status, :commit].include? command.name
    raise "There are no commits in the repository" if repository.branch_head.nil?
  end

  # Switch colors on or off
  unless global[:colors] and $stdout.isatty
    # Disable colorize
    String.class_eval do
      alias_method :original_colorize, :colorize

      def colorize(*args)
        # Ignore color requests
        self
      end
    end
  end

  true
end

post do |global, command, options, args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)